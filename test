import pandas as pd
import numpy as np
import pulp

# Initialize dataset
df = pd.DataFrame({
    "account_id": [f"account_{i+1}" for i in range(100)],
    "csm_name": np.random.choice([f"csm_{i+1}" for i in range(10)], size=100),
    "health_score": np.random.randint(0, 101, size=100),
    "propensity_score": np.random.randint(0, 101, size=100),
    "score_1": np.random.randint(0, 101, size=100),
    "score_2": np.random.randint(0, 101, size=100),
    "score_3": np.random.randint(0, 101, size=100),
})

def initialize_problem(df, num_csms, csm_mapping, max_accounts_per_csm=30):
    num_accounts = len(df)
    prob = pulp.LpProblem("CSM_Routing_Optimization", pulp.LpMinimize)
    x = pulp.LpVariable.dicts("x", [(i, j) for i in range(num_accounts) for j in range(num_csms)], cat='Binary')

    # Calculate total scores for each account
    total_scores = df['health_score'] + df['propensity_score'] + df['score_1'] + df['score_2'] + df['score_3']
    
    # Auxiliary variables for the total score assigned to each CSM
    total_csm_scores = [pulp.LpVariable(f"total_score_{j}", cat='Continuous') for j in range(num_csms)]
    
    for j in range(num_csms):
        prob += total_csm_scores[j] == pulp.lpSum(x[i, j] * total_scores.iloc[i] for i in range(num_accounts))
    
    # Calculate the average total score
    avg_total_score = pulp.lpSum(total_csm_scores[j] for j in range(num_csms)) / num_csms
    
    # Auxiliary variables for the differences
    diff = [pulp.LpVariable(f"diff_{j}", cat='Continuous') for j in range(num_csms)]
    for j in range(num_csms):
        prob += diff[j] == total_csm_scores[j] - avg_total_score
    
    # Auxiliary variables for squared differences using absolute value and linear constraints
    diff_squared = [pulp.LpVariable(f"diff_squared_{j}", lowBound=0, cat='Continuous') for j in range(num_csms)]
    abs_diff = [pulp.LpVariable(f"abs_diff_{j}", lowBound=0, cat='Continuous') for j in range(num_csms)]
    for j in range(num_csms):
        prob += abs_diff[j] >= diff[j]
        prob += abs_diff[j] >= -diff[j]
        prob += diff_squared[j] >= abs_diff[j]

    # Objective function: minimize the sum of squared differences
    prob += pulp.lpSum(diff_squared[j] for j in range(num_csms))

    # Constraint 1: Each account is assigned to exactly one CSM
    for i in range(num_accounts):
        prob += pulp.lpSum(x[i, j] for j in range(num_csms)) == 1

    # Constraint 2: Each CSM is assigned no more than max_accounts_per_csm accounts
    for j in range(num_csms):
        prob += pulp.lpSum(x[i, j] for i in range(num_accounts)) <= max_accounts_per_csm

    # Define current assignment (for reducing shuffling)
    current_assignment = df['csm_name'].map(csm_mapping)

    # Constraint 3: Minimize shuffling by penalizing changes in assignment
    shuffle_penalty = pulp.lpSum(x[i, j] * (current_assignment.iloc[i] != j) for i in range(num_accounts) for j in range(num_csms) if pd.notna(current_assignment.iloc[i]))
    prob += shuffle_penalty

    return prob, x

def solve_problem(df, new_csm_list, max_accounts_per_csm=30):
    csm_mapping = {csm: i for i, csm in enumerate(new_csm_list)}
    num_csms = len(new_csm_list)
    prob, x = initialize_problem(df, num_csms, csm_mapping, max_accounts_per_csm)
    prob.solve()
    num_accounts = len(df)
    assignments = [(i, j) for i in range(num_accounts) for j in range(num_csms) if pulp.value(x[i, j]) == 1]
    optimized_df = df.copy()
    optimized_df['new_csm_name'] = [new_csm_list[j] for i, j in assignments]
    return optimized_df

def modify_csm_list(df, csms_to_add=[], csms_to_remove=[]):
    # Mark the accounts with removed CSMs as unassigned (NaN)
    df.loc[df['csm_name'].isin(csms_to_remove), 'csm_name'] = np.nan
    
    # Create a list of current CSMs excluding the ones to be removed
    current_csms = [csm for csm in df['csm_name'].dropna().unique() if csm not in csms_to_remove]
    
    # Add new CSMs to the pool
    new_csm_list = current_csms + csms_to_add
    
    # Solve the problem with the updated CSM list
    return solve_problem(df, new_csm_list, max_accounts_per_csm=30)

def add_new_accounts(df, new_accounts):
    new_accounts['csm_name'] = np.nan
    new_df = pd.concat([df, new_accounts], ignore_index=True)
    current_csms = new_df['csm_name'].dropna().unique().tolist()
    return solve_problem(new_df, current_csms, max_accounts_per_csm=30)

def remove_accounts(df, accounts_to_remove):
    df = df[~df['account_id'].isin(accounts_to_remove)]
    current_csms = df['csm_name'].unique().tolist()
    return solve_problem(df, current_csms, max_accounts_per_csm=30)

def get_total_scores(optimized_df):
    total_scores = optimized_df.groupby('new_csm_name')[['health_score', 'propensity_score', 'score_1', 'score_2', 'score_3']].sum()
    total_scores['total_score'] = total_scores.sum(axis=1)
    return total_scores

# Example usage:
csms_to_add = ['csm_11', 'csm_12']
csms_to_remove = ['csm_2', 'csm_5']
optimized_df = modify_csm_list(df, csms_to_add=csms_to_add, csms_to_remove=csms_to_remove)
print("Optimization after modifying CSM list:")
print(optimized_df['new_csm_name'].value_counts())
print(get_total_scores(optimized_df))

# Adding new accounts example:
new_accounts = pd.DataFrame({
    "account_id": [f"new_account_{i+1}" for i in range(10)],
    "health_score": np.random.randint(0, 101, size=10),
    "propensity_score": np.random.randint(0, 101, size=10),
    "score_1": np.random.randint(0, 101, size=10),
    "score_2": np.random.randint(0, 101, size=10),
    "score_3": np.random.randint(0, 101, size=10),
})
optimized_df_with_new_accounts = add_new_accounts(optimized_df, new_accounts)
print("Optimization after adding new accounts:")
print(optimized_df_with_new_accounts['new_csm_name'].value_counts())
print(get_total_scores(optimized_df_with_new_accounts))

# Removing accounts example:
accounts_to_remove = [f"account_{i+1}" for i in range(5)]
optimized_df_with_removed_accounts = remove_accounts(optimized_df, accounts_to_remove)
print("Optimization after removing accounts:")
print(optimized_df_with_removed_accounts['new_csm_name'].value_counts())
print(get_total_scores(optimized_df_with_removed_accounts))

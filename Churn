import pandas as pd
import numpy as np

# Function to create the churn flag based on tenant life cycle
def assign_churn_flag(group):
    # Step 1: Check if notice_date is available and assign a churn stage based on the first calendar_date >= notice_date
    if group['notice_date'].notna().any():
        # Find the stage where churn happened
        churn_stage = group.loc[group['calendar_date'] >= group['notice_date'].iloc[0], 'segment'].unique()
        if len(churn_stage) > 0:
            churn_stage = churn_stage[0]
        else:
            churn_stage = None
    else:
        churn_stage = None

    # Step 2: Apply churn flags based on the segment and churn stage
    group['churn_flag'] = np.where(
        # Mark all rows in the stage where the churn happened as 'Churn'
        (group['segment'] == churn_stage),
        'Churn',

        # Mark all earlier stages as 'Not_churn'
        np.where(
            (group['calendar_date'] < group['notice_date'].iloc[0]),
            'Not_churn',

            # Mark all stages after the churn as 'Null'
            np.where(group['calendar_date'] > group['notice_date'].iloc[0],
                     'Null',
                     np.nan)
        )
    )

    return group

# Apply the function to each tenant's group
df = df.groupby('tenant_id').apply(assign_churn_flag)

# Display the updated DataFrame with the churn_flag column
df[['tenant_id', 'segment', 'calendar_date', 'notice_date', 'churn_flag']]
